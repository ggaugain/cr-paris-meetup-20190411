AWSTemplateFormatVersion: '2010-09-09'
Description: Fargate container on ECS cluster and ECR docker image
## Docs : https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/template-reference.html

############################################################
###                     Resources                        ###
Resources:

  # A task definition describes the container and volume definitions of an Amazon Elastic Container Service (Amazon ECS) task. 
  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: task-app
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: appli-demo
          # Repository URI format: <account id>.dkr.ecr.<AWS region>.amazonaws.com/<repository name>:<version>
          Image:
            Fn::Join: 
            - ""
            - - !ImportValue RepositoryDNS # From infra/ecr-repo.yml Outputs
              - '/'
              - !ImportValue RepositoryName # From infra/ecr-repo.yml Outputs
              - ':latest'
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue 'CloudwatchLogGroup' # From infra/ecs.yml Outputs
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: 'http'
  
  # Runs and maintains the requested number of tasks and associated load balancers.
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: app-service
      TaskDefinition: !Ref Task
      Cluster: !ImportValue 'ECSCluster' # From infra/ecs.yml Outputs
      LaunchType: FARGATE
      DesiredCount: 8
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED # ENABLED or DISABLED
          Subnets:
            - !ImportValue 'PrivateSubnetAZ1' # From infra/vpc-3azs.yml Outputs
            - !ImportValue 'PrivateSubnetAZ2' # From infra/vpc-3azs.yml Outputs
            - !ImportValue 'PrivateSubnetAZ3' # From infra/vpc-3azs.yml Outputs
          SecurityGroups:
            - !ImportValue 'ContainerSecurityGroup' # From infra/ecs.yml Outputs
      LoadBalancers:
        - ContainerName: appli-demo
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
  
  # TargetGroup resource creates a target group that routes requests to one or more registered targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: appli-tg
      VpcId: !ImportValue VPC # From infra/vpc-3azs.yml Outputs
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      TargetType: ip
  
  # Defines the rules for a listener
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue Listener # From infra/ecs-cluster.yml Outputs
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # IAM Role for ECS Task
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

############################################################
###                       Outputs                        ###
Outputs:

  AppliEndpoint:
    Description: Appli Demo Endpoint
    Value: !Join ['', ['http://', !ImportValue DomainName, '/']]
    Export:
      Name: 'AppliDemoEndpoint'